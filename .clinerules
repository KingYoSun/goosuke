# Goosuke開発プロジェクト設定
project_name = "goosuke"
description = "小～中規模組織向けGoose AIエージェント連携プラットフォーム"

# 言語・フレームワーク設定
language = "python"
python_version = "3.10"
framework = "fastapi"

# コード生成スタイル
use_type_hints = true
include_docstrings = true
follow_pep8 = true
max_line_length = 100

# ディレクトリ構造を維持
respect_directory_structure = true

# 依存関係設定
dependencies = [
  "fastapi>=0.100.0",
  "uvicorn>=0.22.0",
  "python-jose>=3.3.0",
  "python-multipart>=0.0.6",
  "sqlalchemy>=2.0.0",
  "pydantic>=2.0.0",
  "aiohttp>=3.8.5",
  "discord.py>=2.3.0",
  "python-dotenv>=1.0.0",
  "passlib>=1.7.4"
]

# Docker設定
docker_base_image = "python:3.10-slim"
use_multi_stage_build = true
include_healthcheck = true

# テスト設定
test_framework = "pytest"
generate_tests = true
test_database_url = "sqlite+aiosqlite:///file:memdb?mode=memory&cache=shared&uri=true"
use_transaction_per_test = true
mock_external_services_only = true
test_isolation = true

# データベース接続パターン
db_connection_pattern = """
@asynccontextmanager
async def _get_db_context():
    async with async_session_factory() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
"""

# テスト用データベース接続パターン
test_db_connection_pattern = """
@asynccontextmanager
async def test_get_db_context():
    async with TestAsyncSessionLocal() as session:
        async with session.begin():
            yield session
            # トランザクションは自動的にロールバックされる
"""

# テスト用テーブル作成パターン
test_table_creation_pattern = """
# テーブルが存在することを確認
async def ensure_table_exists(session, table_name, create_table_sql):
    # テーブルの存在確認
    result = await session.execute(text(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'"))
    if result.scalar() is None:
        # テーブルが存在しない場合は作成
        await session.execute(text(create_table_sql))
        await session.commit()
"""

# テスト用データベース初期化パターン
test_db_init_pattern = """
# テスト用データベースを初期化する関数
async def init_test_db():
    # テーブルの作成
    async with test_engine.begin() as conn:
        # 既存のテーブルを削除
        await conn.run_sync(Base.metadata.drop_all)
        # テーブルを作成
        await conn.run_sync(Base.metadata.create_all)
        
        # 追加のテーブル作成（モデルに定義されていないテーブル）
        for table_name, create_table_sql in ADDITIONAL_TABLES.items():
            await ensure_table_exists(conn, table_name, create_table_sql)
"""

# セキュリティルール
avoid_secrets_in_code = true
use_environment_variables = true
validate_user_input = true

# 出力設定
create_multiple_files = true
include_file_paths = true

# 特別な指示
instructions = [
  "コードには理解を助ける詳細なコメントを含める",
  "SQLiteデータベーススキーマは起動時に自動作成されるようにする",
  "ローカルテスト用のDocker Compose設定を作成する",
  "Goose統合では堅牢性とエラー処理に重点を置く",
  "設定パラメータは環境変数でカスタマイズ可能にする",
  "コアコードの変更を最小限に抑えて拡張できるように設計する",
  "改行時に不要な空白を削除する",
  "test, lintの実行については docs/testing.md を参照する",
  "マイグレーションについては docs/database_migrations.md を参照する",
  "テストではgoose CLIとテスト用モックDB以外のモックは最小限にする",
  "テスト間の独立性を確保するためにトランザクションを活用する",
  "テストコードの保守性を高めるために共通のセットアップコードを集約する"
]

# テスト方針
test_guidelines = [
  "goose CLIとテスト用モックDB以外のモックは最小限にする",
  "外部連携部分（API呼び出しなど）のみをモック化する",
  "テスト間の独立性を確保するためにトランザクションを活用する",
  "テストコードの保守性を高めるために共通のセットアップコードを集約する",
  "テーブル作成は各テスト関数内ではなく、conftest.pyで一元管理する",
  "テストデータベースの初期化は、setup_test_db フィクスチャで行う",
  "テストデータベースのクリーンアップは、db_session フィクスチャで行う",
  "テスト用のデータベース接続は、test_get_db_context 関数を使用する",
  "テスト用のテーブル作成は、ensure_table_exists 関数を使用する",
  "テスト用のデータベース初期化は、init_test_db 関数を使用する",
  "実装コードにテスト用の条件分岐（if文など）を追加しない"
]