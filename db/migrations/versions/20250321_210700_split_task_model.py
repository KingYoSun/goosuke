"""split task model into template and execution

Revision ID: 6f48e9083678
Revises: 5f39e8072567
Create Date: 2025-03-21 21:07:00.000000+09:00

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "6f48e9083678"
down_revision = "5f39e8072567"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. 新しいテーブルの作成
    op.create_table(
        "task_templates",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("task_type", sa.String(), nullable=False),
        sa.Column("prompt", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_task_templates_id"), "task_templates", ["id"], unique=False)
    op.create_index(op.f("ix_task_templates_name"), "task_templates", ["name"], unique=False)
    op.create_index(op.f("ix_task_templates_task_type"), "task_templates", ["task_type"], unique=False)

    op.create_table(
        "task_executions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("template_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.Column("result", sa.Text(), nullable=True),
        sa.Column("extensions_output", sa.JSON(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("error", sa.Text(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["template_id"],
            ["task_templates.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_task_executions_id"), "task_executions", ["id"], unique=False)
    op.create_index(op.f("ix_task_executions_status"), "task_executions", ["status"], unique=False)

    # 2. データの移行
    # 2.1 テンプレートタスクの移行
    op.execute(
        """
        INSERT INTO task_templates (id, user_id, name, task_type, prompt, created_at, updated_at)
        SELECT id, user_id, COALESCE(name, 'Template ' || id), task_type, prompt, created_at, updated_at
        FROM tasks
        WHERE is_template = 1
        """
    )

    # 2.2 テンプレートでないタスクのテンプレートを作成
    op.execute(
        """
        INSERT INTO task_templates (user_id, name, task_type, prompt, created_at, updated_at)
        SELECT user_id, COALESCE(name, 'Template for task ' || id), task_type, prompt, created_at, updated_at
        FROM tasks
        WHERE is_template = 0 AND parent_id IS NULL
        """
    )

    # 2.3 テンプレートでないタスクの実行ログを作成
    op.execute(
        """
        INSERT INTO task_executions (
            template_id, user_id, context, result, extensions_output,
            status, error, created_at, updated_at, completed_at
        )
        SELECT
            CASE
                WHEN parent_id IS NOT NULL THEN parent_id
                ELSE (SELECT id FROM task_templates WHERE name = 'Template for task ' || tasks.id LIMIT 1)
            END,
            user_id, context, result, extensions_output,
            status, error, created_at, updated_at, completed_at
        FROM tasks
        WHERE is_template = 0
        """
    )

    # 3. アクションテーブルの参照を更新
    # 3.1 アクションテーブルに一時的なカラムを追加
    op.add_column("actions", sa.Column("template_id", sa.Integer(), nullable=True))

    # 3.2 テンプレートタスクへの参照を更新
    op.execute(
        """
        UPDATE actions
        SET template_id = task_id
        WHERE task_id IN (SELECT id FROM tasks WHERE is_template = 1)
        """
    )

    # 3.3 テンプレートでないタスクの参照を更新
    op.execute(
        """
        UPDATE actions
        SET template_id = (
            SELECT
                CASE
                    WHEN t.parent_id IS NOT NULL THEN t.parent_id
                    ELSE (SELECT id FROM task_templates WHERE name = 'Template for task ' || t.id LIMIT 1)
                END
            FROM tasks t
            WHERE t.id = actions.task_id AND t.is_template = 0
        )
        WHERE task_id IN (SELECT id FROM tasks WHERE is_template = 0)
        """
    )

    # 3.4 外部キー制約を更新
    op.drop_constraint("actions_task_id_fkey", "actions", type_="foreignkey")
    op.create_foreign_key("actions_template_id_fkey", "actions", "task_templates", ["template_id"], ["id"])

    # 3.5 古いカラムを削除し、新しいカラムをリネーム
    op.drop_column("actions", "task_id")
    op.alter_column("actions", "template_id", new_column_name="task_template_id")

    # 4. 古いテーブルを削除（オプション）
    # 注意: 既存のコードが古いテーブルに依存している場合は、この部分をコメントアウトしてください
    # op.drop_table('tasks')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. アクションテーブルの参照を元に戻す
    op.add_column("actions", sa.Column("task_id", sa.Integer(), nullable=True))
    op.execute(
        """
        UPDATE actions
        SET task_id = task_template_id
        """
    )
    op.drop_constraint("actions_template_id_fkey", "actions", type_="foreignkey")
    op.create_foreign_key("actions_task_id_fkey", "actions", "tasks", ["task_id"], ["id"])
    op.drop_column("actions", "task_template_id")

    # 2. 新しいテーブルを削除
    op.drop_index(op.f("ix_task_executions_status"), table_name="task_executions")
    op.drop_index(op.f("ix_task_executions_id"), table_name="task_executions")
    op.drop_table("task_executions")

    op.drop_index(op.f("ix_task_templates_task_type"), table_name="task_templates")
    op.drop_index(op.f("ix_task_templates_name"), table_name="task_templates")
    op.drop_index(op.f("ix_task_templates_id"), table_name="task_templates")
    op.drop_table("task_templates")

    # ### end Alembic commands ###
